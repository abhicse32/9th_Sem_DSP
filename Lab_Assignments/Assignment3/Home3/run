#! /usr/bin/env python
import  sys,os,re,plot2,plot3
from subprocess import call,Popen,PIPE
solDir,outDir,execDir,testDir="solutions","outputs","executables","testcases"

def execute(opts="all"):
    os.system("make clean")
    os.system("make "+opts)
    execs= os.listdir(execDir)
    for noext in execs:
        testPath,outPath,execPath=os.path.join(testDir,noext+".in"),os.path.join(outDir,noext+".out"),os.path.join(execDir,noext)
        # print testPath, outPath
        with open(testPath,"r") as reader:
            with open(outPath,"w") as writer:
                if noext=='q2' or noext=='q3':
                    ps= Popen("./"+execPath, stdin= PIPE, stdout= PIPE, stderr= PIPE)
                    out,err= ps.communicate(os.linesep.join([lines for lines in reader]))
                    writer.write(out.strip()+"\n")
                else:
                    lines=int(reader.readline())
                    for i in range(lines):
                        ps=Popen("./"+execPath,stdin=PIPE,stdout=PIPE,stderr=PIPE)
                        out,err= ps.communicate(os.linesep.join([reader.readline() for k in range(2)]))
                        writer.write(out.strip()+"\n")

def evaluate():
    execs= os.listdir(execDir)
    path="CS12B032_HOME"
    for noext in execs:
        if noext=='q3':
            files=['out3_insertion.txt','out3_selection.txt','out3_bubble.txt','out3_quick.txt','out3_merge.txt']
            for file in files:
                plot3.plot(os.path.join(path,file))
        else:
            sol_path,out_path= os.path.join(solDir,noext+".ans"),os.path.join(outDir,noext+".out")
            # print sol_path, out_path
            with open(out_path,"r") as out_reader:
                with open(sol_path,"r") as sol_reader:
                    passed,total=0,0
                    for i in range(10):
                        sol_,out_= [sol_reader.readline().strip() for k in range(5)],[out_reader.readline().strip() for k in range(5)]
                        if noext=='q2':
                            sol_=[sol_reader.readline().strip() for k in range(4)]
                            out_=[out_reader.readline().strip() for k in range(4)]
                        total+=1
                        if sol_==out_:
                            print "testcase %d: passed"%(total)
                            passed+=1
                        else:
                            print "testcase %d: failed"%(total)
                    print "result:%d/%d"%(passed,total)
            if noext=='q2':
                plot2.plot(os.path.join(path,'out2.txt'))

if __name__=='__main__':
    opts=""
    if len(sys.argv)>1:
        opts=' '.join(sys.argv[1:])
    if not os.path.exists(outDir):
        os.system("mkdir "+outDir)
    print opts
    execute(opts)
    evaluate()



