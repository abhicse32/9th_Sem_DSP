#! /usr/bin/env python
import  sys,os,re
from subprocess import call,Popen,PIPE
solDir,outDir,execDir,testDir="solutions","outputs","executables","testcases"

def execute(opts="all"):
    os.system("make clean")
    os.system("make "+opts)
    execs= [f for f in os.listdir(execDir) if not f.startswith(".") and not f.startswith("~")]
    for noext in execs:
        testPath,outPath,execPath=os.path.join(testDir,noext+".in"),\
        os.path.join(outDir,noext+".out"),os.path.join(execDir,noext)
        # print testPath, outPath,execPath
        os.system("./"+execPath+" < "+testPath+" > "+outPath)

def evaluate():
    execs= [file for file in os.listdir(execDir) if not file.startswith(".") and not file.startswith("~")]
    for noext in execs:
        sol_path,out_path= os.path.join(solDir,noext+".ans"),os.path.join(outDir,noext+".out")
        print "evaluating %s.c"%(noext)
        with open(sol_path,"r") as sol_reader:
            with open(out_path,"r") as out_reader:
                total,passed=0,0
                for line in sol_reader:
                    out_line= out_reader.readline().strip()
                    sol_line= line.strip()
                    total+=1
                    if out_line==sol_line:
                        print"line %d: passed"%total
                        passed+=1
                    else:
                        print "line %d:failed"%total
                print "result: %d/%d passed"%(passed,total)

if __name__=='__main__':
    opts="all"
    if len(sys.argv)>1:
        opts=' '.join(sys.argv[1:])
    if not os.path.exists(outDir):
        os.system("mkdir "+outDir)
    print opts
    execute(opts)
    evaluate()